/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'markstrefford' at '13/01/15 14:11' with Gradle 2.2.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

version = '1.0'

// Apply the java plugin to add support for Java
//apply plugin: 'java'
apply plugin: 'scala'


project.ext {
    sparkVersion = '1.2.0-cdh5.3.0'
    cassandraVersion = '2.1.2'
}
// In this section you declare where to find the dependencies of your project
repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "https://repository.cloudera.com/artifactory/repo/" }
    maven { url "http://scala-tools.org/repo-releases"}
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.scala-lang:scala-library:2.11.1'
    compile group: 'org.apache.spark', name: 'spark-core_2.10', version: project.sparkVersion
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: project.cassandraVersion
    compile group: 'com.datastax.spark', name: 'spark-cassandra-connector_2.10', version: '1.1.1'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:4.11"
    testCompile "org.scala-lang:scala-library:2.11.1"
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'com.mkyong.DateUtils'
    }
    zip64 = true
    baseName = project.name + '-all'
    from (configurations.compile.collect { it.isDirectory() ? it : zipTree(it)  }) {
        // remove all signature files
//        exclude "META-INF/*.SF"
//        exclude "META-INF/*.DSA"
//        exclude "META-INF/*.RSA"


    }
    with jar
}

jar {
    // adds runtime dependencies to jar package
    zip64 = true
    from(configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }) {
        // remove all signature files
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}